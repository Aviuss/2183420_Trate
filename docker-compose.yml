name: TRate
services:
  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    ports:
      - "8081:8081"
    volumes:
      - ./containers/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    depends_on:
      - app
      - auth
      - process-translation

  auth:
    build: ./containers/auth
    container_name: auth
    ports:
      - "3000:3000"
    depends_on:
      - postgresdb
    healthcheck:
      test: "curl -f http://localhost:3000/healthcheck"
      interval: 20s
      timeout: 45s
      retries: 2
    restart: always
    environment:
      - DATABASE_URL=postgresql://${POSTGRESDB_USER}:${POSTGRESDB_PASSWORD}@postgresdb:5432/postgresdb
  
  postgresdb:
    build: ./containers/postgresdb
    container_name: postgresdb
    ports:
      - 5432:5432
    volumes:
      - postgresdb-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRESDB_USER}
      - POSTGRES_PASSWORD=${POSTGRESDB_PASSWORD}
      - POSTGRES_DB=postgresdb
    
  app:
    build: ./containers/app
    container_name: app
    ports:
      - "5000:5000"
    restart: always

  open-ai-translation:
    build: ./containers/open-ai-translation
    container_name: open-ai-translation
    environment:
      - OPEN_AI_API_KEY=${OPEN_AI_API_KEY}
      - AMQP_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - DATABASE_URL=postgresql://${POSTGRESDB_USER}:${POSTGRESDB_PASSWORD}@postgresdb:5432/postgresdb
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      
  process-translation:
    build: ./containers/process-translation
    container_name: process-translation
    ports:
      - "5002:5002"
    restart: always
    environment:
      AMQP_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRESDB_USER}:${POSTGRESDB_PASSWORD}@postgresdb:5432/postgresdb
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    build: ./containers/rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq-data-volume:/var/lib/rabbitmq/
      - rabbitmq-log-volume:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: "curl -f http://localhost:15672"
      interval: 10s
      timeout: 10s
      retries: 3     
  
  llama-translation:
    build: ./containers/llama-translation
    container_name: llama-translation
    environment:
      - AMQP_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      - OPEN_AI_API_KEY=${OPEN_AI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRESDB_USER}:${POSTGRESDB_PASSWORD}@postgresdb:5432/postgresdb
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      ollama:
        condition: service_started

  ollama:
    image: ollama/ollama:latest
    pull_policy: always
    container_name: ollama
    ports:
    - 11434:11434
    restart: always
    volumes:
      - ollama-volume:/root/.ollama


volumes:
  postgresdb-volume:
    name: postgresdb-volume
  rabbitmq-data-volume:
    name: rabbitmq-data-volume
  rabbitmq-log-volume:
    name: rabbitmq-log-volume
  autoheal-volume:
    name: autoheal-volume
  ollama-volume:
    name: ollama-volume